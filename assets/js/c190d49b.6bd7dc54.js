"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[506],{3905:function(e,a,n){n.d(a,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,s=function(e,a){if(null==e)return{};var n,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=o.createContext({}),d=function(e){var a=o.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},u=function(e){var a=d(e.components);return o.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},c=o.forwardRef((function(e,a){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=s,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||r;return n?o.createElement(h,t(t({ref:a},u),{},{components:n})):o.createElement(h,t({ref:a},u))}));function m(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=n.length,t=new Array(r);t[0]=c;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,t[1]=i;for(var d=2;d<r;d++)t[d]=n[d];return o.createElement.apply(null,t)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},726:function(e,a,n){n.r(a),n.d(a,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var o=n(3117),s=n(102),r=(n(7294),n(3905)),t=["components"],i={},l=void 0,d={unversionedId:"Python/PEP20",id:"Python/PEP20",title:"PEP20",description:'"Al igual que cada arquitecto/a impregna sus creaciones con su propia visi\xf3n y personalidad, o la cocina de cada chef suele tener una esencia \xfanica, cada desarrollador/a escribe c\xf3digo seg\xfan sus gustos, por lo que el c\xf3digo de diferentes desarrolladores/as suele ser muy heterog\xe9neo (diferente)." (elpythonista)',source:"@site/docs/Python/PEP20.md",sourceDirName:"Python",slug:"/Python/PEP20",permalink:"/docs/Python/PEP20",editUrl:"https://github.com/juanretamales/my-website/tree/main/packages/create-docusaurus/templates/shared/docs/Python/PEP20.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutoriales",permalink:"/docs/intro"},next:{title:"PEP8",permalink:"/docs/Python/PEP8"}},u={},p=[{value:"1. Bello es mejor que feo.",id:"1-bello-es-mejor-que-feo",level:2},{value:"2. Expl\xedcito es mejor que impl\xedcito",id:"2-expl\xedcito-es-mejor-que-impl\xedcito",level:2},{value:"3. Simple es mejor que complejo",id:"3-simple-es-mejor-que-complejo",level:2},{value:"4. Complejo es mejor que complicado",id:"4-complejo-es-mejor-que-complicado",level:2},{value:"5. Plano es mejor que anidado",id:"5-plano-es-mejor-que-anidado",level:2},{value:"6. Disperso es mejor que denso",id:"6-disperso-es-mejor-que-denso",level:2},{value:"7. La legibilidad importa",id:"7-la-legibilidad-importa",level:2},{value:"8. Los casos especiales no son lo suficientemente especiales para romper reglas",id:"8-los-casos-especiales-no-son-lo-suficientemente-especiales-para-romper-reglas",level:2},{value:"9. Practicidad vence a la pureza",id:"9-practicidad-vence-a-la-pureza",level:2},{value:"10. Los errores nunca deber\xedan de ocurrir silenciosamente",id:"10-los-errores-nunca-deber\xedan-de-ocurrir-silenciosamente",level:2},{value:"11. A no ser que se silencien expl\xedcitamente",id:"11-a-no-ser-que-se-silencien-expl\xedcitamente",level:2},{value:"12. En el caso de ambig\xfcedad, rechaza la tentaci\xf3n de adivinar",id:"12-en-el-caso-de-ambig\xfcedad-rechaza-la-tentaci\xf3n-de-adivinar",level:2},{value:"13. Deber\xeda de haber una \u2013 y preferiblemente s\xf3lo una \u2013 forma obvia de hacerlo",id:"13-deber\xeda-de-haber-una--y-preferiblemente-s\xf3lo-una--forma-obvia-de-hacerlo",level:2},{value:"14. Aunque la forma no parezca obvia a la primera, a no ser que seas Holand\xe9s",id:"14-aunque-la-forma-no-parezca-obvia-a-la-primera-a-no-ser-que-seas-holand\xe9s",level:2},{value:"15. Ahora es mejor que nunca",id:"15-ahora-es-mejor-que-nunca",level:2},{value:"16. Aunque nunca es a menudo mejor que ahora mismo",id:"16-aunque-nunca-es-a-menudo-mejor-que-ahora-mismo",level:2},{value:"17. Si la implementaci\xf3n es dif\xedcil de explicar, es una mala idea",id:"17-si-la-implementaci\xf3n-es-dif\xedcil-de-explicar-es-una-mala-idea",level:2},{value:"18. Si la implementaci\xf3n es facil de explicar, probablemente sea buena idea",id:"18-si-la-implementaci\xf3n-es-facil-de-explicar-probablemente-sea-buena-idea",level:2},{value:"19. Los espacios de nombres son una buena idea, \xa1usemos m\xe1s de ellos!",id:"19-los-espacios-de-nombres-son-una-buena-idea-usemos-m\xe1s-de-ellos",level:2},{value:"20. Nada es verdad, todo esta permitido (Ezio Auditore)",id:"20-nada-es-verdad-todo-esta-permitido-ezio-auditore",level:2}],c={toc:p};function m(e){var a=e.components,n=(0,s.Z)(e,t);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pep-20--el-zen-de-python"},"PEP 20 \u2013 El Zen de Python"),(0,r.kt)("p",null,'"Al igual que cada arquitecto/a impregna sus creaciones con su propia visi\xf3n y personalidad, o la cocina de cada chef suele tener una esencia \xfanica, cada desarrollador/a escribe c\xf3digo seg\xfan sus gustos, por lo que el c\xf3digo de diferentes desarrolladores/as suele ser muy heterog\xe9neo (diferente)." (elpythonista)'),(0,r.kt)("p",null,"Ademas, entender el Zen de Python nos ayudara a entender las directrices en la que fue creado y las que se seguira desarrollando Python, por lo que el c\xf3digo desarrollado siguiendo estas guias se considerara Pyth\xf3nico."),(0,r.kt)("p",null,"Dado que Python es uno de los pocos lenguajes con unas directrices tan claras hace que el lenguaje sea a\xfan m\xe1s extraordinario."),(0,r.kt)("h1",{id:"que-es-zen"},"\xbfQue es Zen?"),(0,r.kt)("p",null,"El zen se basa en la b\xfasqueda de la iluminaci\xf3n a trav\xe9s de t\xe9cnicas que evitan los esquemas conceptuales.  (definicion.de)"),(0,r.kt)("h1",{id:"que-es-el-zen-de-python"},"\xbfQue es el Zen de Python?"),(0,r.kt)("p",null,"El Zen de Python es una colecci\xf3n de 20 principios de software que influyen en el dise\xf1o del Lenguaje de Programaci\xf3n Python, de los cuales 19 fueron escritos por Tim Peters\u200b."),(0,r.kt)("p",null,"Podr\xeda exportarse a otros lenguajes dado que muchas de sus reglas no son \xfanicas para Python sino aplicables a cualquier lenguaje."),(0,r.kt)("h2",{id:"1-bello-es-mejor-que-feo"},"1. Bello es mejor que feo."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Beautiful is better than ugly")),(0,r.kt)("p",null,"En programaci\xf3n cualquiera con algunas decenas de miles de l\xedneas escritas puede apreciar si un c\xf3digo es bonito o feo, aplicando las siguientes reglas o con reglas propias que da la experiencia."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# ejemplo de codigo feo\ngatos=4;perros=6;patas=34;\nassert patas==(gatos*perros*4),'N\xfamero de patas dispar';\n\n# ejemplo de codigo bonito\ngatos = 4\nperros = 6\npatas = 34\nassert patas == (gatos * 4) + (perros * 4), 'N\xfamero de patas dispar'\n")),(0,r.kt)("h2",{id:"2-expl\xedcito-es-mejor-que-impl\xedcito"},"2. Expl\xedcito es mejor que impl\xedcito"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Explicit is better than implicit")),(0,r.kt)("p",null,"Cuando un c\xf3digo es expl\xedcito, no requiere que el lector tenga que intuir o saber de antemano alg\xfan elemento impl\xedcito del sistema, haciendo que la legibilidad mejore considerablemente."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# version implicita\ndef mts_in2(m):\n    return m * 39.3701 * 2\n\n# version explicita\ndef metros_a_pulgadas_dobles(metros:int):\n    pulgadas_por_metro = 39.3701\n    multi_doble = 2\n    return metros * pulgada_por_metro * multi_doble\n")),(0,r.kt)("h2",{id:"3-simple-es-mejor-que-complejo"},"3. Simple es mejor que complejo"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Simple is better than complex.")),(0,r.kt)("p",null,"Si el sistema est\xe1 correctamente implementado, cada parte independiente ser\xe1 simple si se estudia de forma aislada, por lo que, el estudio del sistema completo se podr\xeda simplificar en el estudio de cada parte simple."),(0,r.kt)("h2",{id:"4-complejo-es-mejor-que-complicado"},"4. Complejo es mejor que complicado"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Complex is better than complicated.")),(0,r.kt)("p",null,"Un sistema complicado, se compone de elementos simples que no son independientes entre s\xed, sino que el sistema conoce de alguna l\xf3gica extra que convierte el sistema en complicado."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import datetime as dt\n# version complejo\nint(numpy.ceil((end_date - start_date).days + (end_date - start_date).seconds / 86400 )) if isinstance(start_date:dt.datetime) and isinstance(end_date:dt.datetime) else 0\n\n# version Simple\ndef obtener_dias(start_date:dt.datetime, end_date:dt.datetime)->int:\n    if isinstance(start_date:dt.datetime) and isinstance(end_date:dt.datetime):\n        diferencia_fechas = end_date - start_date\n        segundos_en_dia = 86400\n        dias = diferencia_fechas.days + diferencia_fechas.seconds / segundos_en_dia\n        return int(numpy.ceil(dias))\n    else:\n        return 0\n\nobtener_dias(start_date, end_date)\n")),(0,r.kt)("p",null,"Por tanto por orden de preferencia ser\xeda:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Simple > Complejo > Complicado ")),(0,r.kt)("h2",{id:"5-plano-es-mejor-que-anidado"},"5. Plano es mejor que anidado"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Flat is better than nested.")),(0,r.kt)("p",null,"La capacidad de retenci\xf3n y comprensi\xf3n de cada desarrollador es limitada, por tanto si se anidan las sentencias en vez de mantenerlas lo m\xe1s planas posibles, se suele mermar la capacidad cansando al lector del c\xf3digo."),(0,r.kt)("p",null,"Una forma de aplanar un c\xf3digo anidado es usando funciones planas y otra podr\xeda ser separando en modulos o funciones simples, aunque la primera opci\xf3n suele quedar muy densa f\xe1cilmente."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# version anidada\nvalores_ajustados = []\nfor s in sistemas:\n    sensores = sensores_sistema(s)\n    for sensor in sensores:\n        valores_s = valores_sensor(sensor)\n        for val in valores_s:\n            valores_ajustados.append(ajustar_valor(val))\n\n# version aplanada pero densa\nvalores_ajustados = [ajustar_valor(val) for val in valores_sensor(sensor) for sensor in sensores_sistema(s) for s in sistemas]\n\n# version en funciones simples, testeables y escalables\ndef valores_del_sistema_ajustados(sistemas):\n    for sistema in sistemas:\n        yield valores_sistema(sistema)\n\ndef valores_sistema(sistema):\n    for sensores in sistema:\n        yield valores_sensores(sensores)\n\ndef valores_sensores(sensores):\n    for sensor in sensores:\n        yield valores_sensor_ajustados(sensor)\n\ndef valores_sensor_ajustados(sensor):\n    for valor in valores_sensor(sensor):\n        yield ajustar_valor(valor)\n")),(0,r.kt)("h2",{id:"6-disperso-es-mejor-que-denso"},"6. Disperso es mejor que denso"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Sparse is better than dense.")),(0,r.kt)("p",null,"Cuando se aumenta la densidad del c\xf3digo haciendo en pocas l\xedneas muchas operaciones se puede hacer perder el foco del lector, por tanto es muy recomendable a\xf1adir espacios entre bloques l\xf3gicos. No intentes pegar demasiado c\xf3digo en una l\xednea, especialmente si la capacidad del equipo aun no esta preparado. Si la operaci\xf3n es simple, puedes usar una operacion plana (por el punto anterior) siempre que no requiera comentar todos los resultados como la de la version densa."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# version densa\nreturn i**2 if i > 0 else 0 if i==0  else 2 * i\n\n# version dispersa\nif i > 0:\n    return i**2\nelif i == 0:\n    return 0\nelse: \n    return 2 * i\n\n# version aceptada\nif i > 0:\n    return i**2\nelse:\n    return 0 if i==0 else 2 * i\n")),(0,r.kt)("h2",{id:"7-la-legibilidad-importa"},"7. La legibilidad importa"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Readability counts.")),(0,r.kt)("p",null,"El c\xf3digo se escribe una vez pero se leen cientos de veces, por lo tanto es muy importante prestar especial atenci\xf3n a mejorar la legibilidad lo m\xe1s posible, eligiendo los mejores nombres, separando funciones convenientemente o clases cuando son necesarios."),(0,r.kt)("p",null,"Existen muchas t\xe9cnicas para mejorarlo e incluso libros sobre este tema, posteriormente se publicara el punto sobre pep8, documentar y comentar el codigo."),(0,r.kt)("h2",{id:"8-los-casos-especiales-no-son-lo-suficientemente-especiales-para-romper-reglas"},"8. Los casos especiales no son lo suficientemente especiales para romper reglas"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Special cases aren\u2019t special enough to break the rules.")),(0,r.kt)("p",null,"Cuando se definen unas reglas hay que cumplirlas, tanto en el contrato de trabajo, como en la vida y asi se lleva en el codigo, de lo contrario no tienen raz\xf3n de existir. Los casos \xabespeciales\xbb son la excusa que se pone para romper las reglas pero realmente son sin\xf3nimo de \xabconozco las reglas pero en vez de cambiar el c\xf3digo para cumplirarlas, prefiero romperlas\xbb, lo que deber\xeda de ser inadmisible dado que a la larga (conlleva al desastre). Este ultimo caso seria como definir reglas para realizar commit en git y luego hacer push sin validar (posteriormente se publicara una entrada respeto a este tema). Por eso siempre es buena la practica de definir las reglas y casos en la organizaci\xf3n, para que sea razonable y ayude al trabajo y no solo entorpesca el flujo de desarrollo."),(0,r.kt)("h2",{id:"9-practicidad-vence-a-la-pureza"},"9. Practicidad vence a la pureza"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Although practicality beats purity.")),(0,r.kt)("p",null,"En multitud de ocasiones nos encontramos en la situaci\xf3n de querer escribir el c\xf3digo m\xe1s puro, que sigue todos los patrones de dise\xf1o \xaba raja tabla\xbb y que conlleva a que los sistemas sean demasiado gen\xe9ricos o que se tarden una eternidad en desarrollar, es muy importante encontrar un equilibrio entre lo que es pr\xe1ctico (e importante) y la pureza."),(0,r.kt)("h2",{id:"10-los-errores-nunca-deber\xedan-de-ocurrir-silenciosamente"},"10. Los errores nunca deber\xedan de ocurrir silenciosamente"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Errors should never pass silently.")),(0,r.kt)("p",null,"Cuando se trabaja bajo presi\xf3n y se encuentran errores se tienden a ocultar o a tomar medidas demasiado dr\xe1sticas como la siguiente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    codigo_erroneo()\nexcept Exception:\n   pass\n")),(0,r.kt)("p",null,"O lo que es lo mismo \xabse que este c\xf3digo falla de vez en cuando, cuando lo haga sigue sin m\xe1s\xbb, esto no es solo un antipatr\xf3n sino que demuestra apat\xeda y una desgana de hacer c\xf3digo profesionalmente. ",(0,r.kt)("strong",{parentName:"p"},"Si hay un error debe ser visible para poder ser arreglado"),"."),(0,r.kt)("h2",{id:"11-a-no-ser-que-se-silencien-expl\xedcitamente"},"11. A no ser que se silencien expl\xedcitamente"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Unless explicitly silenced.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Existen excepciones al caso anterior que se dan cuando se ha estudiado la situaci\xf3n, se conoce el error y expl\xedcitamente se silencia (o se act\xfaa en consecuencia)"),"."),(0,r.kt)("p",null,"Si el error que se ha detectado es un ValueError (por ejemplo) pero se sabe que no es problem\xe1tico, se debe de manejar adecuadamente, incluso pudiendo ser silenciado."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    codigo_erroneo()\nexcept ValueError:\n   logger.debug('Value Error manejado correctamente')\n")),(0,r.kt)("h2",{id:"12-en-el-caso-de-ambig\xfcedad-rechaza-la-tentaci\xf3n-de-adivinar"},"12. En el caso de ambig\xfcedad, rechaza la tentaci\xf3n de adivinar"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"In the face of ambiguity, refuse the temptation to guess.")),(0,r.kt)("p",null,"Este concepto aplica a muchos \xe1mbitos del desarrollo, es mucho mejor tener claro qu\xe9 se est\xe1 construyendo y poder crear tests, que exactamente definan y comprueben el buen comportamiento del sistema, eliminando cualquier ambig\xfcedad."),(0,r.kt)("h2",{id:"13-deber\xeda-de-haber-una--y-preferiblemente-s\xf3lo-una--forma-obvia-de-hacerlo"},"13. Deber\xeda de haber una \u2013 y preferiblemente s\xf3lo una \u2013 forma obvia de hacerlo"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"There should be one\u2013 and preferably only one \u2013obvious way to do it.")),(0,r.kt)("p",null,"Si la forma de implementar el problema no parece obvia, quiz\xe1s no sea la m\xe1s correcta y haya que seguir pensando en otra opci\xf3n."),(0,r.kt)("h2",{id:"14-aunque-la-forma-no-parezca-obvia-a-la-primera-a-no-ser-que-seas-holand\xe9s"},"14. Aunque la forma no parezca obvia a la primera, a no ser que seas Holand\xe9s"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Although that way may not be obvious at first unless you\u2019re Dutch.")),(0,r.kt)("p",null,"Es normal que no aparezca la forma obvia la primera vez que piensa la soluci\xf3n, por lo que puede requerir de un m\xe9todo iterativo."),(0,r.kt)("p",null,"El gui\xf1o que se a\xf1ade en esta regla sobre los holandeses hace referencia la nacionalidad del Dictador Benevolente y creador de Python Guido van Rossum."),(0,r.kt)("h2",{id:"15-ahora-es-mejor-que-nunca"},"15. Ahora es mejor que nunca"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Now is better than never")),(0,r.kt)("p",null,"En el desarrollo de software siempre hay tareas que realizar y si no se priorizan las tareas importantes para hacerlas cuando salen los problemas, estos pueden alargarse en el tiempo hasta no hacerlas nunca."),(0,r.kt)("h2",{id:"16-aunque-nunca-es-a-menudo-mejor-que-ahora-mismo"},"16. Aunque nunca es a menudo mejor que ahora mismo"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Although never is often better than right now")),(0,r.kt)("p",null,"Quiere decir que no hay que forzar la realizaci\xf3n de tareas tanto como para dejar lo que se est\xe1 desarrollando actualmente, para desarrollar una tarea nueva, evitando as\xed el cambio de contexto."),(0,r.kt)("h2",{id:"17-si-la-implementaci\xf3n-es-dif\xedcil-de-explicar-es-una-mala-idea"},"17. Si la implementaci\xf3n es dif\xedcil de explicar, es una mala idea"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If the implementation is hard to explain, it\u2019s a bad idea")),(0,r.kt)("p",null,"Esta regla suele aplicarse en muchos \xe1mbitos en general, dado que si no eres capaz de explicar la idea de forma simple es que no la visualizas de forma simple por lo que quiz\xe1s sea necesario consensuar la soluci\xf3n hasta tenerla clara."),(0,r.kt)("h2",{id:"18-si-la-implementaci\xf3n-es-facil-de-explicar-probablemente-sea-buena-idea"},"18. Si la implementaci\xf3n es facil de explicar, probablemente sea buena idea"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If the implementation is easy to explain, it may be a good idea.")),(0,r.kt)("p",null,"Por el contrario al caso anterior, ademas de visualizar de forma simple la soluci\xf3n, ayuda a transmitir de manera efectiva, presica y clara las ideas de la soluci\xf3n."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u201cSi las ordenes no est\xe1n claras y las instrucciones no han sido debidamente explicadas, la culpa es del general, es decir m\xeda\u201d")," (El arte de la guerra)"),(0,r.kt)("h2",{id:"19-los-espacios-de-nombres-son-una-buena-idea-usemos-m\xe1s-de-ellos"},"19. Los espacios de nombres son una buena idea, \xa1usemos m\xe1s de ellos!"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Namespaces are one honking great idea \u2014 let\u2019s do more of those!")),(0,r.kt)("p",null,"Los espacios de nombres en Python se pueden crear de m\xfaltiples formas y ayudan mucho a desacoplar c\xf3digo y de hacerlo m\xe1s modular, por lo que se recomienda usarlos m\xe1s."),(0,r.kt)("h2",{id:"20-nada-es-verdad-todo-esta-permitido-ezio-auditore"},"20. Nada es verdad, todo esta permitido (Ezio Auditore)"),(0,r.kt)("p",null,"Decir que nada es verdad supone darse cuenta de que los cimientos de la sociedad (y sistema informatico) son fr\xe1giles y que debemos ser los pastores de nuestra propia civilizaci\xf3n (y nuestro codigo)."),(0,r.kt)("p",null,"Decir que todo esta permitido es comprender que somos los arquitectos de nuestros actos (codigo) y que debemos vivir con las consecuencias, ya sean gloriosas o tr\xe1gicas. Ademas, que se podrian romper cualquiera de estas reglas (o todas), siempre que se tenga claro conocimiento de las repercuci\xf3nes y preferiblemente se deje constancia del por que se tomaron esas desiciones."),(0,r.kt)("h1",{id:"fuentes"},"Fuentes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/python/peps/blob/main/pep-0020.txt"},"https://github.com/python/peps/blob/main/pep-0020.txt")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://peps.python.org/pep-0020/"},"https://peps.python.org/pep-0020/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://pep20.org/"},"https://pep20.org/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://elpythonista.com/zen-de-python"},"https://elpythonista.com/zen-de-python")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://definicion.de/zen/"},"https://definicion.de/zen/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://pybaq.co/blog/el-zen-de-python-explicado/"},"https://pybaq.co/blog/el-zen-de-python-explicado/"))))}m.isMDXComponent=!0}}]);